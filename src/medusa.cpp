////////////////////////////////////////////////////////////////////////////////
//
// Includes
//
#include "medusa.h"

// STD Includes

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
namespace medusa {
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//
// class CMedusa
//

// Constructors

// Helper Functions
int CMedusa::CreateProcess(std::shared_ptr<CModule> pModule)
{
	std::shared_ptr<CProcess> pProcess(new CProcess(pModule));

	int nID = GenerateProcessID();
	m_mapIDToProcess.emplace(nID, pProcess);

	return nID;
}

void CMedusa::StartAllProcess()
{
	auto mapIterator = m_mapIDToProcess.begin();
	while (mapIterator != m_mapIDToProcess.end())
	{
		CProcess* pProcess = (mapIterator->second).get();
		if (pProcess != nullptr)
			pProcess->Start();

		++mapIterator;
	}
}

////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////
} // namespace medusa
////////////////////////////////////////////////////////////////////////////////