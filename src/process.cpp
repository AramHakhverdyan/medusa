////////////////////////////////////////////////////////////////////////////////
//
// Includes
//
#include "process.h"

// STD Includes
#include <fstream>
#include <iostream>
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
namespace medusa {
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//
// class CStack
//

// Interface Methodes
void CProcess::Start()
{
	try
	{
		while (true)
		{
			std::shared_ptr<IExpression> pExpression = m_pExpressionManager->GetExpression(m_pContext->IP());
			m_pContext->IP() += pExpression->Eval(m_pContext);
		}
	}
	catch (CInterrupt& pInterrupt)
	{
		std::cout << std::endl << pInterrupt.GetMessage() << std::endl;
	}
}

void CProcess::End()
{

}

////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
} // namespace medusa
////////////////////////////////////////////////////////////////////////////////