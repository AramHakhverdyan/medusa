#ifndef MODULE_H
#define MODULE_H

////////////////////////////////////////////////////////////////////////////////
//
// Includes
//
#ifndef INTERRUPT_H
#	include "interrupt.h"
#endif

#ifndef OPERATIONS_H
#	include "operations.h"
#endif

// STD Includes
#include <map>
#include <string>
#include <vector>
#include <memory>
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
namespace medusa {
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//
// class CModule
//
class CModule
{
public:// Constructors
	CModule(std::string const& strModulePath);
	inline ~CModule() = default;

public:// Interface Methodes
	inline COperations::ECode GetOpCode(int nOffset) const;

	inline int GetArgument(int nOffset) const;

	inline int GetSize() const;

private:// Members
	std::vector<std::pair<COperations::ECode, int> > m_arrPairOpCodeArgument;
};
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//
// class CModuleManager
//
class CModuleManager
{
public:// Constructors
	inline CModuleManager();
	inline ~CModuleManager() = default;

public:// Interface Methodes
	std::shared_ptr<CModule> Load(std::string const& strModulePath);

protected:// Helper Functions

private:// Members
	std::map< std::string, std::shared_ptr<CModule> > m_mapPathToModule;
};
////////////////////////////////////////////////////////////////////////////////

///////////////////////// Implementing inline methods //////////////////////////

////////////////////////////////////////////////////////////////////////////////
//
// class CModule
//

// Interface Methodes
inline COperations::ECode CModule::GetOpCode(int nOffset) const
{
	if ((nOffset < 0) || (nOffset >= m_arrPairOpCodeArgument.size()))
		return COperations::ECode::NOP;

	return m_arrPairOpCodeArgument[nOffset].first;
}

inline int CModule::GetArgument(int nOffset) const
{
	return m_arrPairOpCodeArgument[nOffset].second;
}

inline int CModule::GetSize() const
{
	return m_arrPairOpCodeArgument.size();
}

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//
// class CModule
//

// Constructors
inline CModuleManager::CModuleManager()
	: m_mapPathToModule()
{
}

////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
} // namespace medusa
////////////////////////////////////////////////////////////////////////////////


#endif // MODULE_H