#ifndef OPERATIONS_H
#define OPERATIONS_H

////////////////////////////////////////////////////////////////////////////////
//
// Includes
//

// STD Includes
#include <map>
#include <string>
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
namespace medusa {
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//
// class COperations
//
class COperations
{
public:// Types
	enum class ECode : char
	{
		LABEL,
		PUSHR,
		PUSHC,
		HALT,
		JUMP,
		JUMPZ,
		JUMPI,
		CALL,
		ENTER,
		MARK,
		RETURN,
		POP,
		DUP,
		SLIDE,
		LOADC,
		LOAD,
		LOADA,
		LOADR,
		LOADRC,
		STORE,
		STOREA,
		STORER,
		ALLOC,
		MALLOC,
		NEW,
		AND,
		OR,
		EQ,
		NEQ,
		GR,
		GEQ,
		LE,
		LEQ,
		ADD,
		SUB,
		MUL,
		DIV,
		NEG,
		IN,
		OUT,
		NOP
	};

public:// Constructors
	inline COperations();
	inline ~COperations() = default;

public:// Interface Methodes
	void Init();

	std::string const& GetName(ECode eOpCode) const;
	inline ECode GetOpCode(std::string const& strOperation) const;

private:// Members
	std::map<std::string, ECode> m_mapStringToOpCode;
};
////////////////////////////////////////////////////////////////////////////////

///////////////////////// Implementing inline methods //////////////////////////

////////////////////////////////////////////////////////////////////////////////
//
// class CContext
//

// Constructors
inline COperations::COperations()
	: m_mapStringToOpCode()
{
	Init();
}

// Interface Methodes
inline COperations::ECode COperations::GetOpCode(std::string const& strOperation) const
{
	auto mapIterator = m_mapStringToOpCode.find(strOperation);
	if (mapIterator == m_mapStringToOpCode.end())
		return ECode::NOP;

	return mapIterator->second;
}

////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
} // namespace medusa
////////////////////////////////////////////////////////////////////////////////


#endif // OPERATIONS_H